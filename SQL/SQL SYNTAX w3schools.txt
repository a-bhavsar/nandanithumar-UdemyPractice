W3schools sql syntax


SELECT column1, column2, ...
FROM table_name;


SELECT DISTINCT column1, column2, ...
FROM table_name;SELECT column1, column2, ...


FROM table_name
WHERE condition;


SELECT column1, column2, ...
FROM table_name
WHERE condition1 AND condition2 AND condition3 ...;


SELECT column1, column2, ...
FROM table_name
WHERE condition1 OR condition2 OR condition3 ...;


SELECT column1, column2, ...
FROM table_name
WHERE NOT condition;


SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC;


INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);


SELECT column_names
FROM table_name
WHERE column_name IS NOT NULL;


UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;


DELETE FROM table_name WHERE condition;


SELECT column_name(s)
FROM table_name
WHERE condition
LIMIT number;


SELECT MIN(column_name)
FROM table_name
WHERE condition;


SELECT MAX(column_name)
FROM table_name
WHERE condition;


SELECT COUNT(column_name)
FROM table_name
WHERE condition;


SELECT AVG(column_name)
FROM table_name
WHERE condition;


SELECT SUM(column_name)
FROM table_name
WHERE condition;


SELECT column1, column2, ...
FROM table_name
WHERE columnN LIKE pattern;


  



SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1, value2, ...);


SELECT column_name(s)
FROM table_name
WHERE column_name IN (SELECT STATEMENT);


SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2;


SELECT column_name AS alias_name
FROM table_name;


SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate
FROM Orders
INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;


SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName
FROM ((Orders
INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)
INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);


SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID
ORDER BY Customers.CustomerName;


SELECT Orders.OrderID, Employees.LastName, Employees.FirstName
FROM Orders
RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID
ORDER BY Orders.OrderID;


SELECT Customers.CustomerName, Orders.OrderID
FROM Customers
FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID
ORDER BY Customers.CustomerName;








SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City
FROM Customers A, Customers B
WHERE A.CustomerID <> B.CustomerID
AND A.City = B.City
ORDER BY A.City;


SELECT City FROM Customers
UNION
SELECT City FROM Suppliers
ORDER BY City;
Note: If some customers or suppliers have the same city, each city will only be listed once, because UNION selects only distinct values. Use UNION ALL to also select duplicate values!


SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
ORDER BY column_name(s);


The HAVING clause was added to SQL because the WHERE keyword cannot be used with aggregate functions.
SELECT column_name(s)
FROM table_name
WHERE condition
GROUP BY column_name(s)
HAVING condition
ORDER BY column_name(s);


SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders
FROM (Orders
INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID)
GROUP BY LastName
HAVING COUNT(Orders.OrderID) > 10;












The EXISTS operator is used to test for the existence of any record in a subquery.
The EXISTS operator returns TRUE if the subquery returns one or more records.


SELECT column_name(s)
FROM table_name
WHERE EXISTS
(SELECT column_name FROM table_name WHERE condition);


SELECT SupplierName
FROM Suppliers
WHERE EXISTS (SELECT ProductName FROM Products WHERE Products.SupplierID = Suppliers.supplierID AND Price < 20);


(Here exists is like condition if given condition become true then the query is execute)








SELECT column_name(s)
FROM table_name
WHERE column_name operator ANY
  (SELECT column_name
  FROM table_name
  WHERE condition);


SELECT ProductName 
FROM Products
WHERE ProductID = ANY (SELECT ProductID FROM OrderDetails WHERE Quantity = 10);










The SELECT INTO statement copies data from one table into a new table.
SELECT *
INTO newtable [IN externaldb]
FROM oldtable
WHERE condition;


SELECT * INTO CustomersBackup2017 IN 'Backup.mdb'
FROM Customers;




The INSERT INTO SELECT statement copies data from one table and inserts it into another table.
The INSERT INTO SELECT statement requires that the data types in source and target tables match.


SELECT OrderID, Quantity,
CASE
    WHEN Quantity > 30 THEN 'The quantity is greater than 30'
    WHEN Quantity = 30 THEN 'The quantity is 30'
    ELSE 'The quantity is under 30'
END AS QuantityText
FROM OrderDetails;


Stored Procedure Syntax
CREATE PROCEDURE procedure_name
AS
sql_statement
GO;


EXECUTION:
EXEC procedure_name;




CREATE PROCEDURE SelectAllCustomers
AS
SELECT * FROM Customers
GO;
EXEC SelectAllCustomers;


CREATE PROCEDURE SelectAllCustomers @City nvarchar(30)
AS
SELECT * FROM Customers WHERE City = @City
GO;
EXEC SelectAllCustomers @City = 'London';


--Select all:
SELECT * FROM Customers;




BACKUP DATABASE databasename
TO DISK = 'filepath';




ALTER TABLE table_name
ADD column_name datatype;
ALTER TABLE table_name
DROP COLUMN column_name;
ALTER TABLE table_name
RENAME COLUMN old_name to new_name;


CREATE VIEW view_name AS
SELECT column1, column2, ...
FROM table_name
WHERE condition;


CREATE INDEX idx_lastname
ON Persons (LastName);